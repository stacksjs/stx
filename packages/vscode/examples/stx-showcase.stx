<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>stx Syntax Showcase</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    .example {
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 15px;
      margin-bottom: 20px;
      background-color: #f9f9f9;
    }
    h1, h2, h3 {
      color: #0066cc;
    }
    code {
      font-family: 'Courier New', monospace;
      background-color: #f0f0f0;
      padding: 2px 4px;
      border-radius: 3px;
    }
  </style>
</head>
<body>
  <!-- ========== BASIC SYNTAX EXAMPLES ========== -->
  <h1>stx Syntax Showcase</h1>

  <!-- Comments -->
  <div class="example">
    <h2>Comments</h2>
    {{-- This is a comment that won't be rendered in the output --}}
    {{--
        Multi-line comments
        are also supported
    --}}
  </div>

  <!-- Echo with escaping -->
  <div class="example">
    <h2>Echo Statements</h2>
    <p>Standard echo (escaped): {{ "hello <b>world</b>" }}</p>
    <p>Raw echo (unescaped): {!! "<b>hello world</b>" !!}</p>
    <p>Triple curly braces (HTML escaped): {{{ "<b>hello world</b>" }}}</p>
    <p>Echo expression with calculation: {{ 10 + 20 }}</p>
    <p>Variable interpolation: {{ greeting }}</p>
    <p>Method call: {{ formatDate(new Date()) }}</p>
    <p>Literal escape: @{{ This text will not be processed }}</p>
  </div>

  <!-- Echo without escaping -->
  <div>{!! rawHtml !!}</div>

  <!-- Echo with triple braces -->
  <div>{{{ anotherVariable }}}</div>

  <!-- Echo with @ symbol -->
  <div>@{{ notDirective }}</div>

  <!-- ========== DIRECTIVE EXAMPLES ========== -->

  <!-- TypeScript Block -->
  @ts
    const greeting = 'Hello, World!';
    const numbers = [1, 2, 3, 4, 5];

    interface User {
      id: number;
      name: string;
    }

    function calculateTotal(items: number[]): number {
      return items.reduce((sum, item) => sum + item, 0);
    }

    const total = calculateTotal(numbers);
  @endts

  <!-- JavaScript Block -->
  @js
    const message = 'Hello from JavaScript!';
    const colors = ['red', 'green', 'blue'];

    function sayHello(name) {
      return `Hello, ${name}!`;
    }

    const greeting = sayHello('User');
    console.log(greeting);
  @endjs

  <!-- Raw Content Block -->
  @raw
    This content will be rendered as is, without processing stx {{ expressions }} or @directives
  @endraw

  <!-- Markdown Block -->
  @markdown
    # Markdown Heading

    This is a **bold text** in markdown.

    * List item 1
    * List item 2

    [Link Example](https://example.com)
  @endmarkdown

  <!-- Verbatim Block -->
  @verbatim
    <div>
      This content will be rendered as is, without processing stx {{ expressions }} or @directives
      Special characters like < > & " ' will work as expected in verbatim mode
    </div>
  @endverbatim

  <!-- Conditional Directives -->
  @if(user.loggedIn)
    <p>Welcome back, {{ user.name }}!</p>
  @elseif(user.remembered)
    <p>Welcome back! Please log in to continue.</p>
  @else
    <p>Welcome, guest! Please log in or register.</p>
  @endif

  <!-- Unless Directive (Inverse of if) -->
  @unless(user.loggedIn)
    <p>You are not logged in.</p>
  @endunless

  <!-- Loop Directives -->
  <ul>
    @for(item of items)
      <li>{{ item.name }} - ${{ item.price }}</li>
    @endfor
  </ul>

  <ul>
    @foreach(users as user)
      <li>{{ user.name }} ({{ user.email }})</li>
    @endforeach
  </ul>

  @forelse(notifications as notification)
    <div>{{ notification.message }}</div>
  @empty
    <div>No notifications found.</div>
  @endforelse

  @while(condition)
    <p>Repeated content</p>
  @endwhile

  <!-- Switch Statement -->
  @switch(status)
    @case('pending')
      <span class="badge badge-warning">Pending</span>
      @break
    @case('approved')
      <span class="badge badge-success">Approved</span>
      @break
    @case('rejected')
      <span class="badge badge-danger">Rejected</span>
      @break
    @default
      <span class="badge badge-secondary">Unknown</span>
  @endswitch

  <!-- Environment Check -->
  @env('production')
    <script src="https://analytics.example.com/track.js"></script>
  @endenv

  @env('development')
    <div class="dev-banner">Development Environment</div>
  @endenv

  <!-- Components -->
  @component('components/alert', { type: 'error', message: errorMessage })
  @endcomponent

  @component('ui/button', {
    primary: true,
    size: 'large',
    onClick: () => console.log('clicked')
  })
    Click Me
  @endcomponent

  <!-- Web Components -->
  @webcomponent('ui-card')
    <h2 slot="header">Card Title</h2>
    <p>Card content goes here</p>
    <button slot="footer">Read More</button>
  @endwebcomponent

  <!-- Slots -->
  @slot('header')
    <h2>Header Content</h2>
  @endslot

  <!-- JSON Output -->
  <script>
    const userData = @json(user);
    const config = @json(settings, { pretty: true });
  </script>

  <!-- Include Templates -->
  @include('partials/header')
  @include('components/navbar', { activeItem: 'home' })
  @includeIf('optional/feature', { enabled: featureFlag })
  @includeWhen(user.isPremium, 'partials/premium-content')
  @includeUnless(user.isRestricted, 'partials/content')
  @includeFirst(['custom/header', 'default/header'])

  <!-- Sections and Layouts -->
  @extends('layouts/main')

  @section('title', 'Page Title')

  @section('content')
    <div class="container">
      <h1>Main Content</h1>
      <p>This is the main content of the page.</p>
    </div>
  @endsection

  @section('scripts')
    <script>
      console.log('Page specific scripts');
    </script>
  @endsection

  <!-- Stacks -->
  @stack('scripts')

  @push('scripts')
    <script src="/js/example.js"></script>
  @endpush

  @pushIf(condition, 'scripts')
    <script src="/js/conditional.js"></script>
  @endPushIf

  @pushOnce('scripts')
    <script src="/js/once.js"></script>
  @endPushOnce

  <!-- Prepending to Stacks -->
  @prepend('scripts')
    <script src="/js/first.js"></script>
  @endprepend

  @prependOnce('styles')
    <link rel="stylesheet" href="/css/once.css">
  @endPrependOnce

  <!-- Translation/Localization -->
  <p>@translate('messages.welcome', { name: userName })</p>
  <p>@t('messages.greeting')</p>

  <!-- Auth Checks -->
  @auth
    <p>You are logged in!</p>
  @endauth

  @guest
    <p>You are not logged in. <a href="/login">Login</a></p>
  @endguest

  <!-- Error Handling -->
  @error('email')
    <div class="error">{{ $message }}</div>
  @enderror

  <!-- HTML Attributes with stx Expressions -->
  <div :title="{{ dynamicTitle }}">Hover over me</div>
  <button :disabled="{{ isDisabled }}">Submit</button>
  <input :value="{{ inputValue }}" />

  <!-- Checking if Section Exists -->
  @hasSection('sidebar')
    <div class="col-md-3">
      @yield('sidebar')
    </div>
  @endif

  <!-- Misc Directives -->
  @isset(variable)
    <p>The variable is set.</p>
  @endisset

  @empty(collection)
    <p>The collection is empty.</p>
  @endempty

  @once
    <p>This will only be rendered once.</p>
  @endonce

  <!-- Custom Directives -->
  @customDirective('parameter', { key: 'value' })
  @anotherDirective()

  <!-- Conditionals -->
  <div class="example">
    <h2>Conditionals</h2>

    @if (user.isAdmin)
        <p>Welcome, Admin!</p>
    @elseif (user.isModerator)
        <p>Welcome, Moderator!</p>
    @else
        <p>Welcome, User!</p>
    @endif

    @unless (user.isGuest)
        <p>You are logged in.</p>
    @endunless

    <!-- Authentication checks -->
    @auth
        <p>You are authenticated.</p>
    @endauth

    @guest
        <p>You are not authenticated.</p>
    @endguest

    <!-- Permission checks -->
    @can('edit', post)
        <button>Edit Post</button>
    @elsecan('delete', post)
        <button>Delete Post</button>
    @endcan

    @cannot('publish', post)
        <p>You don't have permission to publish.</p>
    @endcannot

    <!-- Empty checks -->
    @empty(items)
        <p>No items available.</p>
    @endempty

    <!-- Switch statements -->
    @switch(user.role)
        @case('admin')
            <p>Administrator access</p>
            @break
        @case('editor')
            <p>Editor access</p>
            @break
        @default
            <p>Basic access</p>
    @endswitch
  </div>

  <!-- Loops -->
  <div class="example">
    <h2>Loops</h2>

    @for (let i = 0; i < 5; i++)
        <p>Item {{ i + 1 }}</p>
    @endfor

    @foreach (items as item)
        <p>{{ item.name }}</p>
    @endforeach

    @forelse (items as item)
        <p>{{ item.name }}</p>
    @empty
        <p>No items found.</p>
    @endforelse

    @while (condition)
        <p>While loop content</p>
    @endwhile
  </div>

  <!-- Typescript Blocks -->
  <div class="example">
    <h2>TypeScript Blocks</h2>

    @ts
        // This is a TypeScript block
        interface User {
            id: number;
            name: string;
            email: string;
            isAdmin: boolean;
        }

        const currentUser: User = {
            id: 1,
            name: "John Doe",
            email: "john@example.com",
            isAdmin: true
        };

        function formatDate(date: Date): string {
            return date.toLocaleDateString();
        }
    @endts

    @script
        // This is an alternative syntax for TypeScript blocks
        const greeting = "Hello, World!";
        const items = [
            { name: "Item 1" },
            { name: "Item 2" },
            { name: "Item 3" }
        ];
    @endscript
  </div>

  <!-- Including Partials -->
  <div class="example">
    <h2>Including Templates</h2>

    @include('partials.header')

    @includeif('partials.sidebar', { activeTab: 'home' })

    @includeunless(user.hideFooter, 'partials.footer')

    @includewhen(showAds, 'partials.advertisements')

    @includefirst(['partials.custom', 'partials.default'])
  </div>

  <!-- Layout & Sections -->
  <div class="example">
    <h2>Layouts & Sections</h2>

    @extends('layouts.main')

    @section('title', 'Page Title')

    @section('content')
        <p>This content will appear in the content section of the layout.</p>
    @endsection

    @section('sidebar')
        <p>Sidebar content.</p>
        @parent
    @endsection

    @yield('scripts')

    <!-- Push content to stacks -->
    @push('scripts')
        <script src="/js/example.js"></script>
    @endpush

    @pushonce('scripts')
        <script src="/js/single-instance.js"></script>
    @endpushonce

    @pushif(condition, 'scripts')
        <script src="/js/conditional.js"></script>
    @endpushif

    @stack('scripts')
  </div>

  <!-- Components -->
  <div class="example">
    <h2>Components</h2>

    @component('components.alert')
        <strong>Important!</strong> Please read this message.
    @endcomponent

    @component('components.modal', ['title' => 'Delete Confirmation'])
        Are you sure you want to delete this item?
        @slot('footer')
            <button>Cancel</button>
            <button>Delete</button>
        @endslot
    @endcomponent
  </div>

  <!-- Props & Attributes -->
  <div class="example">
    <h2>Props & Attributes</h2>

    <input :value="inputValue" />
    <button :disabled="isLoading">Submit</button>
    <div :style="{ color: textColor }">Styled content</div>
    <input :checked="isSelected" type="checkbox" />
    <option :selected="isDefault">Default Option</option>
    <textarea :readonly="isReadOnly"></textarea>
    <input :required="isRequired" />
  </div>

  <!-- JSON & Environment -->
  <div class="example">
    <h2>JSON & Environment</h2>

    <script>
        const data = @json(complexObject);
        const settings = @json(appSettings, JSON_PRETTY_PRINT);
    </script>

    @env('production')
        <script src="/js/analytics.js"></script>
    @endenv
  </div>

  <!-- Miscellaneous Features -->
  <div class="example">
    <h2>Miscellaneous Features</h2>

    <!-- Checking sections -->
    @hassection('sidebar')
        <div class="has-sidebar">
            @yield('content')
        </div>
    @else
        <div class="no-sidebar">
            @yield('content')
        </div>
    @endif

    <!-- Once directive for content that should only be evaluated once -->
    @once
        <style>
            .once-example { color: blue; }
        </style>
    @endonce

    <!-- Use directive -->
    @use('App\View\Components\Alert')

    <!-- Error handling -->
    <div>
        @error('email')
            <div class="error-message">{{ $message }}</div>
        @enderror
    </div>
  </div>
</body>
</html>
