<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>STX Framework Benchmark</title>
  <style>
    * {
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      margin: 0;
      padding: 20px;
      background: #f5f5f5;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    h1 {
      margin: 0 0 20px 0;
      color: #333;
    }

    .jumbotron {
      padding: 20px;
      background: #f8f9fa;
      border-radius: 4px;
      margin-bottom: 20px;
    }

    .jumbotron h1 {
      font-size: 2em;
    }

    .button-group {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 20px;
    }

    button {
      padding: 8px 16px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      transition: background 0.2s;
    }

    button:hover {
      background: #0056b3;
    }

    button:active {
      transform: translateY(1px);
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    td {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }

    tr {
      cursor: pointer;
      transition: background 0.1s;
    }

    tr:hover {
      background: #f8f9fa;
    }

    tr.selected {
      background: #d4edff !important;
    }

    .col-md-1 {
      width: 8%;
      text-align: right;
      padding-right: 20px;
      font-weight: 600;
      color: #666;
    }

    .col-md-4 {
      width: 75%;
    }

    .col-md-1-remove {
      width: 17%;
      text-align: center;
    }

    .remove {
      padding: 4px 12px;
      background: #dc3545;
      font-size: 12px;
    }

    .remove:hover {
      background: #c82333;
    }

    #stats {
      margin-top: 20px;
      padding: 15px;
      background: #e7f3ff;
      border-radius: 4px;
      font-family: 'Courier New', monospace;
      font-size: 14px;
    }

    .stat-row {
      margin: 5px 0;
      display: flex;
      justify-content: space-between;
    }

    .stat-label {
      font-weight: 600;
      color: #0066cc;
    }

    .stat-value {
      color: #333;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="jumbotron">
      <h1>STX Framework Benchmark</h1>
      <p>Performance benchmarks following the js-framework-benchmark specification</p>
    </div>

    <div class="button-group">
      <button id="run" type="button">Create 1,000 rows</button>
      <button id="runlots" type="button">Create 10,000 rows</button>
      <button id="add" type="button">Append 1,000 rows</button>
      <button id="update" type="button">Update every 10th row</button>
      <button id="clear" type="button">Clear</button>
      <button id="swaprows" type="button">Swap rows</button>
    </div>

    <table class="table">
      <tbody id="tbody"></tbody>
    </table>

    <div id="stats">
      <div class="stat-row">
        <span class="stat-label">Last operation:</span>
        <span class="stat-value" id="last-op">-</span>
      </div>
      <div class="stat-row">
        <span class="stat-label">Duration:</span>
        <span class="stat-value" id="duration">-</span>
      </div>
      <div class="stat-row">
        <span class="stat-label">Rows:</span>
        <span class="stat-value" id="row-count">0</span>
      </div>
    </div>
  </div>

  <script type="module">
    let idCounter = 1;
    let data = [];
    let selectedId = null;

    const adjectives = ["pretty", "large", "big", "small", "tall", "short", "long", "handsome", "plain", "quaint", "clean", "elegant", "easy", "angry", "crazy", "helpful", "mushy", "odd", "unsightly", "adorable", "important", "inexpensive", "cheap", "expensive", "fancy"];
    const colours = ["red", "yellow", "blue", "green", "pink", "brown", "purple", "brown", "white", "black", "orange"];
    const nouns = ["table", "chair", "house", "bbq", "desk", "car", "pony", "cookie", "sandwich", "burger", "pizza", "mouse", "keyboard"];

    function _random(max) {
      return Math.round(Math.random() * 1000) % max;
    }

    function buildData(count) {
      const arr = [];
      for (let i = 0; i < count; i++) {
        arr.push({
          id: idCounter++,
          label: `${adjectives[_random(adjectives.length)]} ${colours[_random(colours.length)]} ${nouns[_random(nouns.length)]}`
        });
      }
      return arr;
    }

    function updateStats(operation, duration) {
      document.getElementById('last-op').textContent = operation;
      document.getElementById('duration').textContent = `${duration.toFixed(2)}ms`;
      document.getElementById('row-count').textContent = data.length;
    }

    function measure(name, fn) {
      const start = performance.now();
      fn();
      const duration = performance.now() - start;
      updateStats(name, duration);
      return duration;
    }

    function renderRow(item) {
      const tr = document.createElement('tr');
      tr.dataset.id = item.id;
      if (item.id === selectedId) {
        tr.className = 'selected';
      }

      tr.innerHTML = `
        <td class="col-md-1">${item.id}</td>
        <td class="col-md-4">
          <a class="label">${item.label}</a>
        </td>
        <td class="col-md-1-remove">
          <button class="remove" data-id="${item.id}">
            <span>‚ùå</span>
          </button>
        </td>
      `;

      return tr;
    }

    function render() {
      const tbody = document.getElementById('tbody');
      const fragment = document.createDocumentFragment();

      for (let i = 0; i < data.length; i++) {
        fragment.appendChild(renderRow(data[i]));
      }

      tbody.innerHTML = '';
      tbody.appendChild(fragment);
    }

    function run() {
      measure('Create 1,000 rows', () => {
        data = buildData(1000);
        render();
      });
    }

    function runLots() {
      measure('Create 10,000 rows', () => {
        data = buildData(10000);
        render();
      });
    }

    function add() {
      measure('Append 1,000 rows', () => {
        data = data.concat(buildData(1000));
        render();
      });
    }

    function update() {
      measure('Update every 10th row', () => {
        for (let i = 0; i < data.length; i += 10) {
          data[i].label += ' !!!';
        }
        render();
      });
    }

    function clear() {
      measure('Clear all rows', () => {
        data = [];
        render();
      });
    }

    function swapRows() {
      measure('Swap 2 rows', () => {
        if (data.length > 998) {
          const tmp = data[1];
          data[1] = data[998];
          data[998] = tmp;
          render();
        }
      });
    }

    function select(id) {
      measure('Select row', () => {
        if (selectedId !== null) {
          const prevSelected = document.querySelector(`tr[data-id="${selectedId}"]`);
          if (prevSelected) {
            prevSelected.classList.remove('selected');
          }
        }

        selectedId = id;
        const selected = document.querySelector(`tr[data-id="${id}"]`);
        if (selected) {
          selected.classList.add('selected');
        }
      });
    }

    function remove(id) {
      measure('Remove row', () => {
        const idx = data.findIndex(d => d.id === id);
        if (idx > -1) {
          data.splice(idx, 1);
          render();
        }
      });
    }

    // Event delegation
    document.getElementById('tbody').addEventListener('click', (e) => {
      const target = e.target;

      // Handle remove button
      if (target.closest('.remove')) {
        const id = parseInt(target.closest('.remove').dataset.id);
        remove(id);
        return;
      }

      // Handle row selection
      const tr = target.closest('tr');
      if (tr) {
        const id = parseInt(tr.dataset.id);
        select(id);
      }
    });

    // Button handlers
    document.getElementById('run').addEventListener('click', run);
    document.getElementById('runlots').addEventListener('click', runLots);
    document.getElementById('add').addEventListener('click', add);
    document.getElementById('update').addEventListener('click', update);
    document.getElementById('clear').addEventListener('click', clear);
    document.getElementById('swaprows').addEventListener('click', swapRows);

    // Expose functions globally for benchmarking
    window.benchmarkFunctions = {
      run,
      runLots,
      add,
      update,
      clear,
      swapRows,
      select,
      remove
    };
  </script>
</body>
</html>
