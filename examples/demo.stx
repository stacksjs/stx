<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>stx Demo</title>
  <script>
    module.exports = {
      title: "stx Interactive Demo",
      description: "A powerful templating engine for Bun",
      features: [
        { name: "Templates", description: "Write HTML with powerful templating syntax" },
        { name: "Directives", description: "Use @if, @foreach, and other directives" },
        { name: "Components", description: "Build reusable components" },
        { name: "Streaming", description: "Support for streaming rendering" }
      ],
      user: {
        name: "Demo User",
        isLoggedIn: true,
        role: "Developer"
      },
      theme: "light",
      count: 0
    };
  </script>
  <style>
    body {
      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.5;
      padding: 2rem;
      max-width: 800px;
      margin: 0 auto;
      transition: background-color 0.3s, color 0.3s;
    }

    .dark {
      background-color: #1a1a1a;
      color: #f5f5f5;
    }

    .light {
      background-color: #f5f5f5;
      color: #1a1a1a;
    }

    header {
      margin-bottom: 2rem;
    }

    h1 {
      margin-bottom: 0.5rem;
    }

    .user-bar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      padding: 1rem;
      border-radius: 8px;
    }

    .dark .user-bar {
      background-color: #333;
    }

    .light .user-bar {
      background-color: #e0e0e0;
    }

    .feature-card {
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 1rem;
      transition: transform 0.2s;
      cursor: pointer;
    }

    .feature-card:hover {
      transform: translateY(-5px);
    }

    .dark .feature-card {
      background-color: #333;
    }

    .light .feature-card {
      background-color: #e0e0e0;
    }

    .counter {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin: 2rem 0;
    }

    button {
      padding: 0.5rem 1rem;
      border-radius: 4px;
      border: none;
      cursor: pointer;
      font-weight: bold;
    }

    .dark button {
      background-color: #555;
      color: white;
    }

    .light button {
      background-color: #ddd;
      color: black;
    }

    #count-display {
      font-size: 1.5rem;
      font-weight: bold;
      min-width: 3rem;
      text-align: center;
    }

    .theme-toggle {
      cursor: pointer;
      padding: 0.5rem 1rem;
      border-radius: 4px;
    }

    .dark .theme-toggle {
      background-color: #555;
    }

    .light .theme-toggle {
      background-color: #ddd;
    }
  </style>
</head>
<body class="{{ theme }}">
  <header>
    <h1>{{ title }}</h1>
    <p>{{ description }}</p>
  </header>

  <div class="user-bar">
    @if(user.isLoggedIn)
      <div class="welcome">üëã Welcome back, {{ user.name }} ({{ user.role }})</div>
    @else
      <div class="welcome">üëã Welcome, Guest</div>
    @endif

    <div class="theme-toggle" id="theme-toggle">
      @if(theme === 'light')
        üåô Dark Mode
      @else
        ‚òÄÔ∏è Light Mode
      @endif
    </div>
  </div>

  <h2>Features</h2>
  <div class="features">
    @foreach(features as feature)
      <div class="feature-card">
        <h3>{{ feature.name }}</h3>
        <p>{{ feature.description }}</p>
      </div>
    @endforeach
  </div>

  <h2>Interactive Counter</h2>
  <div class="counter">
    <button id="decrement">-</button>
    <div id="count-display">{{ count }}</div>
    <button id="increment">+</button>
  </div>

  <script>
    // Client-side JavaScript
    document.addEventListener('DOMContentLoaded', () => {
      // Theme toggling
      const body = document.body;
      const themeToggle = document.getElementById('theme-toggle');

      themeToggle.addEventListener('click', () => {
        const isDark = body.classList.contains('dark');
        body.classList.remove(isDark ? 'dark' : 'light');
        body.classList.add(isDark ? 'light' : 'dark');
        themeToggle.innerHTML = isDark ? 'üåô Dark Mode' : '‚òÄÔ∏è Light Mode';
      });

      // Counter functionality
      const countDisplay = document.getElementById('count-display');
      const incrementBtn = document.getElementById('increment');
      const decrementBtn = document.getElementById('decrement');
      let count = parseInt(countDisplay.textContent);

      incrementBtn.addEventListener('click', () => {
        count++;
        countDisplay.textContent = count;
      });

      decrementBtn.addEventListener('click', () => {
        count--;
        countDisplay.textContent = count;
      });

      // Feature card effect
      const featureCards = document.querySelectorAll('.feature-card');
      featureCards.forEach(card => {
        card.addEventListener('click', () => {
          // Add a subtle pulse effect
          card.style.opacity = '0.8';
          setTimeout(() => {
            card.style.opacity = '1';
          }, 200);
        });
      });
    });
  </script>
</body>
</html>
